import { fareMatrixService } from './fareMatrixService';
import { getBaseUrl } from '../../config/apiConfig';

export interface BotResponse {
  message: string;
  type: 'text' | 'fare_info' | 'route_info' | 'emergency' | 'error';
  data?: any;
  suggestions?: string[];
}

export interface FareCalculationRequest {
  from: string;
  to: string;
  routeId?: number;
}

class BiyaBotService {
  private baseUrl: string;

  // Checkpoint names in both English and Tagalog
  private checkpointTranslations: { [key: string]: string[] } = {
    'SM Epza': ['SM Epza', 'SM Epza'],
    'Robinson Tejero': ['Robinson Tejero', 'Robinson Tejero'],
    'Malabon': ['Malabon', 'Malabon'],
    'Riverside': ['Riverside', 'Riverside'],
    'Lancaster New City': ['Lancaster New City', 'Lancaster New City'],
    'Pasong Camachile I': ['Pasong Camachile I', 'Pasong Camachile I'],
    'Open Canal': ['Open Canal', 'Open Canal'],
    'Santiago': ['Santiago', 'Santiago'],
    'Bella Vista': ['Bella Vista', 'Bella Vista'],
    'San Francisco': ['San Francisco', 'San Francisco'],
    'Country Meadow': ['Country Meadow', 'Country Meadow'],
    'Pabahay': ['Pabahay', 'Pabahay'],
    'Monterey': ['Monterey', 'Monterey'],
    'Langkaan': ['Langkaan', 'Langkaan'],
    'Tierra Vista': ['Tierra Vista', 'Tierra Vista'],
    'Robinson Dasmari√±as': ['Robinson Dasmari√±as', 'Robinson Dasmari√±as'],
    'SM Dasmari√±as': ['SM Dasmari√±as', 'SM Dasmari√±as']
  };

  // Common phrases and their translations
  private translations: { [key: string]: { en: string; tl: string } } = {
    'fare': { en: 'fare', tl: 'pamasahe' },
    'price': { en: 'price', tl: 'presyo' },
    'cost': { en: 'cost', tl: 'halaga' },
    'how much': { en: 'how much', tl: 'magkano' },
    'from': { en: 'from', tl: 'mula sa' },
    'to': { en: 'to', tl: 'papunta sa' },
    'route': { en: 'route', tl: 'ruta' },
    'time': { en: 'time', tl: 'oras' },
    'arrive': { en: 'arrive', tl: 'dumating' },
    'when': { en: 'when', tl: 'kailan' },
    'where': { en: 'where', tl: 'saan' },
    'help': { en: 'help', tl: 'tulong' },
    'emergency': { en: 'emergency', tl: 'emergency' },
    'contact': { en: 'contact', tl: 'kontak' },
    'jeepney': { en: 'jeepney', tl: 'dyip' },
    'bus': { en: 'bus', tl: 'bus' },
    'transport': { en: 'transport', tl: 'sasakyan' }
  };

  constructor() {
    this.baseUrl = `${getBaseUrl()}/fare-matrix`;
  }

  /**
   * Process user message and generate appropriate response
   */
  async processMessage(userMessage: string): Promise<BotResponse> {
    try {
      console.log('ü§ñ BiyaBot processing message:', userMessage);
      
      const normalizedMessage = this.normalizeMessage(userMessage);
      const detectedLanguage = this.detectLanguage(userMessage);
      
      console.log('üîç Normalized message:', normalizedMessage);
      console.log('üåê Detected language:', detectedLanguage);
      
      // Handle greetings first
      if (this.isGreeting(normalizedMessage)) {
        console.log('üëã Detected greeting');
        return this.handleGreeting(detectedLanguage);
      }

      // Handle thanks/gratitude
      if (this.isThanks(normalizedMessage)) {
        console.log('üôè Detected thanks');
        return this.handleThanks(detectedLanguage);
      }

      // Extract fare calculation request
      const fareRequest = this.extractFareRequest(normalizedMessage);
      if (fareRequest) {
        console.log('üí∞ Detected fare request:', fareRequest);
        return await this.handleFareCalculation(fareRequest, detectedLanguage);
      }

      // Handle route information requests
      if (this.isRouteRequest(normalizedMessage)) {
        console.log('üó∫Ô∏è Detected route request');
        return await this.handleRouteRequest(detectedLanguage);
      }

      // Handle time/arrival requests
      if (this.isTimeRequest(normalizedMessage)) {
        console.log('‚è∞ Detected time request');
        return this.handleTimeRequest(detectedLanguage);
      }

      // Handle emergency requests
      if (this.isEmergencyRequest(normalizedMessage)) {
        console.log('üö® Detected emergency request');
        return this.handleEmergencyRequest(detectedLanguage);
      }

      // Handle general help
      if (this.isHelpRequest(normalizedMessage)) {
        console.log('‚ùì Detected help request');
        return this.handleHelpRequest(detectedLanguage);
      }

      // Default response
      console.log('‚ùì No specific intent detected, using default response');
      return this.handleDefaultResponse(detectedLanguage);

    } catch (error) {
      console.error('‚ùå BiyaBot error:', error);
      return {
        message: 'Sorry, I encountered an error. Please try again.',
        type: 'error',
        suggestions: ['Calculate fare', 'Show routes', 'Emergency contacts']
      };
    }
  }

  /**
   * Normalize message for processing
   */
  private normalizeMessage(message: string): string {
    return message.toLowerCase()
      .replace(/[^\w\s]/g, '') // Remove punctuation
      .replace(/\s+/g, ' ') // Normalize whitespace
      .trim();
  }

  /**
   * Detect language (Tagalog or English)
   */
  private detectLanguage(message: string): 'en' | 'tl' {
    const tagalogWords = ['magkano', 'pamasahe', 'presyo', 'halaga', 'mula sa', 'papunta sa', 'ruta', 'oras', 'dumating', 'kailan', 'saan', 'tulong', 'dyip', 'sasakyan'];
    const lowerMessage = message.toLowerCase();
    
    return tagalogWords.some(word => lowerMessage.includes(word)) ? 'tl' : 'en';
  }

  /**
   * Extract fare calculation request from message
   */
  private extractFareRequest(message: string): FareCalculationRequest | null {
    // Enhanced patterns for fare requests - more flexible and comprehensive
    const farePatterns = [
      // English patterns
      /(?:fare|price|cost|how much).*(?:from|mula sa)\s+([^,]+?)(?:\s+to|\s+papunta sa)\s+([^,]+)/i,
      /(?:from|mula sa)\s+([^,]+?)(?:\s+to|\s+papunta sa)\s+([^,]+?)(?:\s+fare|price|cost)/i,
      /(?:how much|magkano).*(?:from|mula sa)\s+([^,]+?)(?:\s+to|\s+papunta sa)\s+([^,]+)/i,
      
      // Tagalog patterns - more specific
      /(?:magkano|pamasahe|presyo|halaga).*(?:mula sa|from)\s+([^,]+?)(?:\s+papunta sa|\s+to)\s+([^,]+)/i,
      /(?:mula sa|from)\s+([^,]+?)(?:\s+papunta sa|\s+to)\s+([^,]+?)(?:\s+magkano|pamasahe|presyo)/i,
      
      // More flexible patterns
      /(?:fare|pamasahe|price|presyo|cost|halaga|magkano).*(?:from|mula sa)\s+([^,]+?)(?:\s+to|\s+papunta sa)\s+([^,]+)/i,
      /(?:from|mula sa)\s+([^,]+?)(?:\s+to|\s+papunta sa)\s+([^,]+?)(?:\s+fare|pamasahe|price|presyo|cost|halaga)/i,
      
      // Direct location-to-location patterns
      /([^,]+?)(?:\s+to|\s+papunta sa)\s+([^,]+?)(?:\s+fare|pamasahe|price|presyo|cost|halaga|magkano)/i,
      /(?:fare|pamasahe|price|presyo|cost|halaga|magkano).*([^,]+?)(?:\s+to|\s+papunta sa)\s+([^,]+)/i,
      
      // Special case: "magkano mula [location] papuntang [location]"
      /magkano\s+mula\s+([^,]+?)\s+papuntang\s+([^,]+)/i,
      /magkano\s+mula\s+([^,]+?)\s+papunta\s+sa\s+([^,]+)/i
    ];

    for (const pattern of farePatterns) {
      const match = message.match(pattern);
      if (match) {
        const from = this.normalizeCheckpointName(match[1].trim());
        const to = this.normalizeCheckpointName(match[2].trim());
        
        if (from && to) {
          console.log('üéØ Extracted fare request:', { from, to });
          return { from, to };
        }
      }
    }

    // Fallback: try to extract locations even without explicit fare keywords
    const locationPatterns = [
      /([^,]+?)(?:\s+to|\s+papunta sa)\s+([^,]+)/i,
      /(?:from|mula sa)\s+([^,]+?)(?:\s+to|\s+papunta sa)\s+([^,]+)/i,
      // Special case for "mula [location] papuntang [location]"
      /mula\s+([^,]+?)\s+papuntang\s+([^,]+)/i
    ];

    for (const pattern of locationPatterns) {
      const match = message.match(pattern);
      if (match) {
        const from = this.normalizeCheckpointName(match[1].trim());
        const to = this.normalizeCheckpointName(match[2].trim());
        
        if (from && to) {
          console.log('üéØ Extracted location pair:', { from, to });
          return { from, to };
        }
      }
    }

    return null;
  }

  /**
   * Normalize checkpoint name
   */
  private normalizeCheckpointName(name: string): string | null {
    const normalizedName = name.trim();
    
    // Direct match
    if (this.checkpointTranslations[normalizedName]) {
      console.log('‚úÖ Direct match found:', normalizedName);
      return normalizedName;
    }

    // Enhanced partial matching with better logic
    for (const [checkpoint, translations] of Object.entries(this.checkpointTranslations)) {
      // Check if any translation contains the input or vice versa
      const found = translations.some(translation => {
        const lowerTranslation = translation.toLowerCase();
        const lowerInput = normalizedName.toLowerCase();
        
        // Exact match
        if (lowerTranslation === lowerInput) return true;
        
        // Contains match (more flexible)
        if (lowerTranslation.includes(lowerInput) || lowerInput.includes(lowerTranslation)) return true;
        
        // Word boundary match for better accuracy
        const words = lowerInput.split(/\s+/);
        return words.some(word => 
          word.length > 2 && lowerTranslation.includes(word)
        );
      });
      
      if (found) {
        console.log('‚úÖ Partial match found:', normalizedName, '->', checkpoint);
        return checkpoint;
      }
    }

    // Additional fuzzy matching for common variations
    const fuzzyMatches: { [key: string]: string } = {
      'sm epza': 'SM Epza',
      'epza': 'SM Epza',
      'sm dasma': 'SM Dasmari√±as',
      'sm dasmari√±as': 'SM Dasmari√±as',
      'sm dasmarias': 'SM Dasmari√±as', // Handle normalized version without √±
      'dasmari√±as': 'SM Dasmari√±as',
      'dasmarias': 'SM Dasmari√±as', // Handle normalized version without √±
      'robinson tejero': 'Robinson Tejero',
      'tejero': 'Robinson Tejero',
      'malabon': 'Malabon',
      'riverside': 'Riverside',
      'lancaster': 'Lancaster New City',
      'lancaster new city': 'Lancaster New City',
      'pasong camachile': 'Pasong Camachile I',
      'open canal': 'Open Canal',
      'santiago': 'Santiago',
      'bella vista': 'Bella Vista',
      'san francisco': 'San Francisco',
      'country meadow': 'Country Meadow',
      'pabahay': 'Pabahay',
      'monterey': 'Monterey',
      'langkaan': 'Langkaan',
      'tierra vista': 'Tierra Vista',
      'robinson dasmari√±as': 'Robinson Dasmari√±as',
      'robinson dasmarias': 'Robinson Dasmari√±as' // Handle normalized version without √±
    };

    const fuzzyMatch = fuzzyMatches[normalizedName.toLowerCase()];
    if (fuzzyMatch) {
      console.log('‚úÖ Fuzzy match found:', normalizedName, '->', fuzzyMatch);
      return fuzzyMatch;
    }

    console.log('‚ùå No match found for:', normalizedName);
    return null;
  }

  /**
   * Handle fare calculation request
   */
  private async handleFareCalculation(request: FareCalculationRequest, language: 'en' | 'tl'): Promise<BotResponse> {
    try {
      console.log('üí∞ Calculating fare:', request);
      
      // Get checkpoint IDs for fare calculation
      const fromCheckpointId = this.getCheckpointIdByName(request.from);
      const toCheckpointId = this.getCheckpointIdByName(request.to);
      
      if (!fromCheckpointId || !toCheckpointId) {
        return {
          message: language === 'tl'
            ? `Hindi ko mahanap ang lugar na "${request.from}" o "${request.to}". Paki-check ang pangalan ng lugar.`
            : `I couldn't find the location "${request.from}" or "${request.to}". Please check the location names.`,
          type: 'error',
          suggestions: [
            language === 'tl' ? 'Ipakita ang mga lugar na available' : 'Show available locations',
            language === 'tl' ? 'Tulong' : 'Help'
          ]
        };
      }

      const fareResult = await fareMatrixService.getFareBetweenCheckpoints(
        fromCheckpointId, 
        toCheckpointId, 
        request.routeId
      );
      
      const fare = fareResult.status === 'success' && fareResult.fare_info 
        ? parseFloat(fareResult.fare_info.fare_amount.toString()) 
        : null;
      
      if (fare !== null) {
        const responses = language === 'tl' 
          ? [
              `Ang pamasahe mula sa ${request.from} papunta sa ${request.to} ay ‚Ç±${fare.toFixed(2)}! üòä`,
              `Para sa ${request.from} to ${request.to}, ang pamasahe ay ‚Ç±${fare.toFixed(2)}! üöó`,
              `‚Ç±${fare.toFixed(2)} ang pamasahe mula sa ${request.from} papunta sa ${request.to}! üí∞`,
              `Got it! From ${request.from} to ${request.to}, it's ‚Ç±${fare.toFixed(2)}! ‚ú®`
            ]
          : [
              `The fare from ${request.from} to ${request.to} is ‚Ç±${fare.toFixed(2)}! üòä`,
              `For ${request.from} to ${request.to}, the fare is ‚Ç±${fare.toFixed(2)}! üöó`,
              `‚Ç±${fare.toFixed(2)} is the fare from ${request.from} to ${request.to}! üí∞`,
              `Got it! From ${request.from} to ${request.to}, it's ‚Ç±${fare.toFixed(2)}! ‚ú®`
            ];

        const message = responses[Math.floor(Math.random() * responses.length)];

        return {
          message,
          type: 'fare_info',
          data: { from: request.from, to: request.to, fare },
          suggestions: [
            language === 'tl' ? 'Magkano ang pamasahe sa ibang ruta?' : 'Calculate fare for another route',
            language === 'tl' ? 'Ipakita ang mga ruta' : 'Show available routes',
            language === 'tl' ? 'Kailan darating ang dyip?' : 'When will the jeepney arrive?'
          ]
        };
      } else {
        const responses = language === 'tl'
          ? [
              `Hmm, hindi ko mahanap ang pamasahe mula sa ${request.from} papunta sa ${request.to}. Paki-check ang pangalan ng lugar! ü§î`,
              `Sorry, walang fare info para sa ${request.from} to ${request.to}. Check mo yung location names! üòÖ`,
              `Hindi ko makita yung fare for ${request.from} to ${request.to}. Baka mali yung spelling? ü§∑‚Äç‚ôÄÔ∏è`
            ]
          : [
              `Hmm, I couldn't find the fare from ${request.from} to ${request.to}. Please check the location names! ü§î`,
              `Sorry, no fare info for ${request.from} to ${request.to}. Check the location names! üòÖ`,
              `I can't find the fare for ${request.from} to ${request.to}. Maybe check the spelling? ü§∑‚Äç‚ôÄÔ∏è`
            ];

        const message = responses[Math.floor(Math.random() * responses.length)];

        return {
          message,
          type: 'error',
          suggestions: [
            language === 'tl' ? 'Ipakita ang mga lugar na available' : 'Show available locations',
            language === 'tl' ? 'Tulong' : 'Help'
          ]
        };
      }
    } catch (error) {
      console.error('‚ùå Fare calculation error:', error);
      const message = language === 'tl'
        ? 'May error sa pagkalkula ng pamasahe. Paki-try ulit.'
        : 'There was an error calculating the fare. Please try again.';

      return {
        message,
        type: 'error',
        suggestions: [
          language === 'tl' ? 'Tulong' : 'Help',
          language === 'tl' ? 'Ipakita ang mga ruta' : 'Show routes'
        ]
      };
    }
  }

  /**
   * Handle route information request
   */
  private async handleRouteRequest(language: 'en' | 'tl'): Promise<BotResponse> {
    try {
      const routes = await this.getAvailableRoutes();
      
      const responses = language === 'tl'
        ? [
            `Eto ang mga available na ruta namin! üöó\n\n${routes.map(route => `‚Ä¢ ${route}`).join('\n')}\n\nPwede mo ring i-try ang fare calculator para sa specific na ruta! üòä`,
            `Here are our routes! üó∫Ô∏è\n\n${routes.map(route => `‚Ä¢ ${route}`).join('\n')}\n\nTry mo din yung fare calculator! üí∞`,
            `Mga ruta na available! ‚ú®\n\n${routes.map(route => `‚Ä¢ ${route}`).join('\n')}\n\nPwede mo akong tanungin tungkol sa fare! ü§ó`
          ]
        : [
            `Here are our available routes! üöó\n\n${routes.map(route => `‚Ä¢ ${route}`).join('\n')}\n\nYou can also use the fare calculator for specific routes! üòä`,
            `Check out our routes! üó∫Ô∏è\n\n${routes.map(route => `‚Ä¢ ${route}`).join('\n')}\n\nTry the fare calculator too! üí∞`,
            `Available routes for you! ‚ú®\n\n${routes.map(route => `‚Ä¢ ${route}`).join('\n')}\n\nAsk me about fares anytime! ü§ó`
          ];

      const message = responses[Math.floor(Math.random() * responses.length)];

      return {
        message,
        type: 'route_info',
        data: { routes },
        suggestions: [
          language === 'tl' ? 'Kalkulahin ang pamasahe' : 'Calculate fare',
          language === 'tl' ? 'Kailan darating ang dyip?' : 'When will the jeepney arrive?'
        ]
      };
    } catch (error) {
      console.error('‚ùå Route request error:', error);
      const message = language === 'tl'
        ? 'Hindi ko makuha ang mga ruta ngayon. Paki-try ulit mamaya.'
        : 'I can\'t get the routes right now. Please try again later.';

      return {
        message,
        type: 'error',
        suggestions: [
          language === 'tl' ? 'Tulong' : 'Help',
          language === 'tl' ? 'Kalkulahin ang pamasahe' : 'Calculate fare'
        ]
      };
    }
  }

  /**
   * Handle time/arrival request
   */
  private handleTimeRequest(language: 'en' | 'tl'): BotResponse {
    const responses = language === 'tl'
      ? [
          'Ang estimated arrival time ay 5-7 minutes base sa current traffic! üïê Paki-monitor ang real-time updates sa app! üòä',
          'Darating yung dyip in 5-7 minutes! ‚è∞ Check mo yung app for updates! üöó',
          'Around 5-7 minutes pa! üïí Monitor mo lang yung app for real-time updates! ‚ú®',
          'Estimated 5-7 minutes! ‚è±Ô∏è Keep checking the app for live updates! ü§ó'
        ]
      : [
          'The estimated arrival time is 5-7 minutes based on current traffic! üïê Please monitor real-time updates in the app! üòä',
          'Jeepney will arrive in 5-7 minutes! ‚è∞ Check the app for updates! üöó',
          'Around 5-7 minutes more! üïí Just monitor the app for real-time updates! ‚ú®',
          'Estimated 5-7 minutes! ‚è±Ô∏è Keep checking the app for live updates! ü§ó'
        ];

    const message = responses[Math.floor(Math.random() * responses.length)];

    return {
      message,
      type: 'text',
      suggestions: [
        language === 'tl' ? 'Kalkulahin ang pamasahe' : 'Calculate fare',
        language === 'tl' ? 'Ipakita ang mga ruta' : 'Show routes',
        language === 'tl' ? 'Emergency contacts' : 'Emergency contacts'
      ]
    };
  }

  /**
   * Handle emergency request
   */
  private handleEmergencyRequest(language: 'en' | 'tl'): BotResponse {
    const message = language === 'tl'
      ? 'Emergency contacts:\n‚Ä¢ Police: 117\n‚Ä¢ Fire: 116\n‚Ä¢ Medical: 911\n‚Ä¢ Jeepney Dispatch: (046) 123-4567\n\nPara sa immediate assistance, tawagan ang mga numerong ito.'
      : 'Emergency contacts:\n‚Ä¢ Police: 117\n‚Ä¢ Fire: 116\n‚Ä¢ Medical: 911\n‚Ä¢ Jeepney Dispatch: (046) 123-4567\n\nFor immediate assistance, call these numbers.';

    return {
      message,
      type: 'emergency',
      suggestions: [
        language === 'tl' ? 'Kalkulahin ang pamasahe' : 'Calculate fare',
        language === 'tl' ? 'Ipakita ang mga ruta' : 'Show routes',
        language === 'tl' ? 'Tulong' : 'Help'
      ]
    };
  }

  /**
   * Handle help request
   */
  private handleHelpRequest(language: 'en' | 'tl'): BotResponse {
    const responses = language === 'tl'
      ? [
          'Ako si Biya, ang LakbAI assistant mo! üòä Pwede akong tumulong sa:\n\n‚Ä¢ Pagkalkula ng pamasahe üí∞\n‚Ä¢ Pagpapakita ng mga ruta üó∫Ô∏è\n‚Ä¢ Pagbibigay ng arrival time ‚è∞\n‚Ä¢ Emergency contacts üö®\n\nTanong mo lang ako sa English o Tagalog! ü§ó',
          'Hi! I\'m Biya! üëã Pwede akong tumulong sa:\n\n‚Ä¢ Fare calculations üí∞\n‚Ä¢ Route info üöó\n‚Ä¢ Arrival times ‚è±Ô∏è\n‚Ä¢ Emergency contacts üÜò\n\nAsk me anything in English or Tagalog! ‚ú®',
          'Hello! Ako si Biya! üòÑ I can help with:\n\n‚Ä¢ Pamasahe calculations üíµ\n‚Ä¢ Mga ruta üõ£Ô∏è\n‚Ä¢ Oras ng dating üïê\n‚Ä¢ Emergency contacts üìû\n\nJust ask me in any language! üåü'
        ]
      : [
          'I\'m Biya, your LakbAI assistant! üòä I can help you with:\n\n‚Ä¢ Fare calculations üí∞\n‚Ä¢ Route information üó∫Ô∏è\n‚Ä¢ Arrival times ‚è∞\n‚Ä¢ Emergency contacts üö®\n\nAsk me in English or Tagalog! ü§ó',
          'Hi! I\'m Biya! üëã I can help with:\n\n‚Ä¢ Fare calculations üí∞\n‚Ä¢ Route info üöó\n‚Ä¢ Arrival times ‚è±Ô∏è\n‚Ä¢ Emergency contacts üÜò\n\nAsk me anything in English or Tagalog! ‚ú®',
          'Hello! I\'m Biya! üòÑ I can help with:\n\n‚Ä¢ Fare calculations üíµ\n‚Ä¢ Route information üõ£Ô∏è\n‚Ä¢ Arrival times üïê\n‚Ä¢ Emergency contacts üìû\n\nJust ask me in any language! üåü'
        ];

    const message = responses[Math.floor(Math.random() * responses.length)];

    return {
      message,
      type: 'text',
      suggestions: [
        language === 'tl' ? 'Kalkulahin ang pamasahe' : 'Calculate fare',
        language === 'tl' ? 'Ipakita ang mga ruta' : 'Show routes',
        language === 'tl' ? 'Kailan darating ang dyip?' : 'When will the jeepney arrive?'
      ]
    };
  }

  /**
   * Handle greeting messages
   */
  private handleGreeting(language: 'en' | 'tl'): BotResponse {
    const greetings = language === 'tl' 
      ? [
          'Kumusta! Ako si Biya, ang LakbAI assistant mo! üòä',
          'Hello! Kamusta ka? Ako si Biya! üëã',
          'Hi! Nice to meet you! Ako si Biya, ready akong tumulong! üòÑ',
          'Kumusta! Welcome sa LakbAI! Ako si Biya! üöó'
        ]
      : [
          'Hello! I\'m Biya, your LakbAI assistant! üòä',
          'Hi there! Nice to meet you! I\'m Biya! üëã',
          'Hello! Welcome to LakbAI! I\'m here to help! üòÑ',
          'Hi! I\'m Biya, ready to assist you! üöó'
        ];

    const message = greetings[Math.floor(Math.random() * greetings.length)];

    return {
      message,
      type: 'text',
      suggestions: [
        language === 'tl' ? 'Kalkulahin ang pamasahe' : 'Calculate fare',
        language === 'tl' ? 'Ipakita ang mga ruta' : 'Show routes',
        language === 'tl' ? 'Ano ang kaya mo?' : 'What can you do?'
      ]
    };
  }

  /**
   * Handle thanks/gratitude messages
   */
  private handleThanks(language: 'en' | 'tl'): BotResponse {
    const thanksResponses = language === 'tl'
      ? [
          'Walang anuman! Happy to help! üòä',
          'You\'re welcome! Anytime! üòÑ',
          'No problem! Always here to help! ü§ó',
          'Walang problema! Enjoy your ride! üöó'
        ]
      : [
          'You\'re welcome! Happy to help! üòä',
          'No problem! Anytime! üòÑ',
          'My pleasure! Always here to help! ü§ó',
          'You\'re welcome! Enjoy your ride! üöó'
        ];

    const message = thanksResponses[Math.floor(Math.random() * thanksResponses.length)];

    return {
      message,
      type: 'text',
      suggestions: [
        language === 'tl' ? 'Kalkulahin ang pamasahe' : 'Calculate fare',
        language === 'tl' ? 'Ipakita ang mga ruta' : 'Show routes',
        language === 'tl' ? 'Kailan darating ang dyip?' : 'When will the jeepney arrive?'
      ]
    };
  }

  /**
   * Handle default response
   */
  private handleDefaultResponse(language: 'en' | 'tl'): BotResponse {
    // Try to provide more intelligent responses based on context
    const responses = language === 'tl'
      ? [
          'Hmm, hindi ko naintindihan yan. Pero pwede mo akong tanungin tungkol sa:\n\n‚Ä¢ Pamasahe (halimbawa: "Magkano ang pamasahe mula sa SM Epza papunta sa SM Dasmari√±as?")\n‚Ä¢ Mga ruta ("Ipakita ang mga ruta")\n‚Ä¢ Oras ng dating ("Kailan darating ang dyip?")\n‚Ä¢ Emergency contacts ("Emergency")\n\nTry mo ulit! üòä',
          'Sorry, hindi ko gets yan. Pero alam ko ang mga lugar na ito:\n\nüìç SM Epza, Robinson Tejero, Malabon, Riverside, Lancaster New City, Pasong Camachile I, Open Canal, Santiago, Bella Vista, San Francisco, Country Meadow, Pabahay, Monterey, Langkaan, Tierra Vista, Robinson Dasmari√±as, SM Dasmari√±as\n\nTanong mo ako tungkol sa pamasahe! üí∞',
          'Hindi ko alam yan eh. Pero pwede akong tumulong sa:\n\n‚Ä¢ Pagkalkula ng pamasahe üí∞\n‚Ä¢ Pagpapakita ng mga ruta üó∫Ô∏è\n‚Ä¢ Pagbibigay ng arrival time ‚è∞\n‚Ä¢ Emergency contacts üö®\n\nTry mo lang ako sa English o Tagalog! ü§ó'
        ]
      : [
          'Hmm, I didn\'t quite understand that. But I can help you with:\n\n‚Ä¢ Fare calculations (e.g., "How much is the fare from SM Epza to SM Dasmari√±as?")\n‚Ä¢ Route information ("Show routes")\n‚Ä¢ Arrival times ("When will the jeepney arrive?")\n‚Ä¢ Emergency contacts ("Emergency")\n\nTry asking me again! üòä',
          'Sorry, I didn\'t get that. But I know these locations:\n\nüìç SM Epza, Robinson Tejero, Malabon, Riverside, Lancaster New City, Pasong Camachile I, Open Canal, Santiago, Bella Vista, San Francisco, Country Meadow, Pabahay, Monterey, Langkaan, Tierra Vista, Robinson Dasmari√±as, SM Dasmari√±as\n\nAsk me about fares! üí∞',
          'I\'m not sure about that. But I can help with:\n\n‚Ä¢ Fare calculations üí∞\n‚Ä¢ Route information üó∫Ô∏è\n‚Ä¢ Arrival times ‚è∞\n‚Ä¢ Emergency contacts üö®\n\nJust ask me in English or Tagalog! ü§ó'
        ];

    const message = responses[Math.floor(Math.random() * responses.length)];

    return {
      message,
      type: 'text',
      suggestions: [
        language === 'tl' ? 'Magkano ang pamasahe mula sa SM Epza papunta sa SM Dasmari√±as?' : 'How much is the fare from SM Epza to SM Dasmari√±as?',
        language === 'tl' ? 'Ipakita ang mga ruta' : 'Show routes',
        language === 'tl' ? 'Tulong' : 'Help'
      ]
    };
  }

  /**
   * Check if message is a fare request
   */
  private isFareRequest(message: string): boolean {
    const fareKeywords = ['fare', 'pamasahe', 'price', 'presyo', 'cost', 'halaga', 'magkano', 'how much'];
    return fareKeywords.some(keyword => message.includes(keyword));
  }

  /**
   * Check if message is a route request
   */
  private isRouteRequest(message: string): boolean {
    const routeKeywords = ['route', 'ruta', 'show routes', 'ipapakita ang mga ruta', 'available routes'];
    return routeKeywords.some(keyword => message.includes(keyword));
  }

  /**
   * Check if message is a time request
   */
  private isTimeRequest(message: string): boolean {
    const timeKeywords = ['time', 'oras', 'arrive', 'dumating', 'when', 'kailan', 'arrival'];
    return timeKeywords.some(keyword => message.includes(keyword));
  }

  /**
   * Check if message is an emergency request
   */
  private isEmergencyRequest(message: string): boolean {
    const emergencyKeywords = ['emergency', 'emergency', 'contact', 'kontak', 'help', 'tulong', 'police', 'pulis'];
    return emergencyKeywords.some(keyword => message.includes(keyword));
  }

  /**
   * Check if message is a help request
   */
  private isHelpRequest(message: string): boolean {
    const helpKeywords = ['help', 'tulong', 'what can you do', 'ano ang kaya mo', 'commands', 'mga utos'];
    return helpKeywords.some(keyword => message.includes(keyword));
  }

  /**
   * Check if message is a greeting
   */
  private isGreeting(message: string): boolean {
    const greetingKeywords = [
      'hi', 'hello', 'hey', 'good morning', 'good afternoon', 'good evening',
      'kumusta', 'kamusta', 'mabuhay', 'magandang umaga', 'magandang hapon', 'magandang gabi'
    ];
    return greetingKeywords.some(keyword => message.includes(keyword));
  }

  /**
   * Check if message is expressing thanks/gratitude
   */
  private isThanks(message: string): boolean {
    // More specific thanks patterns to avoid false positives
    const thanksPatterns = [
      /\bthank you\b/i,
      /\bthanks\b/i,
      /\bsalamat\b/i,
      /\bmaraming salamat\b/i,
      /\bthank\b/i,
      /\bty\b/i, // Only match 'ty' as a standalone word
      /\bappreciate\b/i,
      /\bgrateful\b/i,
      /\bnakakatulong\b/i,
      /\btulong mo\b/i
    ];
    
    // Check if any thanks pattern matches
    const hasThanksPattern = thanksPatterns.some(pattern => pattern.test(message));
    
    // Additional check: if it's a fare request, don't treat as thanks
    const fareRequest = this.extractFareRequest(message);
    if (fareRequest) {
      return false; // It's a fare request, not thanks
    }
    
    return hasThanksPattern;
  }

  /**
   * Get checkpoint ID by name
   */
  private getCheckpointIdByName(checkpointName: string): number | null {
    // Route 1: SM Epza ‚Üí SM Dasmari√±as (IDs 46-62)
    const route1Map: { [key: string]: number } = {
      'SM Epza': 46,
      'Robinson Tejero': 47,
      'Malabon': 48,
      'Riverside': 49,
      'Lancaster New City': 50,
      'Pasong Camachile I': 51,
      'Open Canal': 52,
      'Santiago': 53,
      'Bella Vista': 54,
      'San Francisco': 55,
      'Country Meadow': 56,
      'Pabahay': 57,
      'Monterey': 58,
      'Langkaan': 59,
      'Tierra Vista': 60,
      'Robinson Dasmari√±as': 61,
      'SM Dasmari√±as': 62,
    };

    // Route 2: SM Dasmari√±as ‚Üí SM Epza (IDs 63-79)
    const route2Map: { [key: string]: number } = {
      'SM Dasmari√±as': 63,
      'Robinson Dasmari√±as': 64,
      'Tierra Vista': 65,
      'Langkaan': 66,
      'Monterey': 67,
      'Pabahay': 68,
      'Country Meadow': 69,
      'San Francisco': 70,
      'Bella Vista': 71,
      'Santiago': 72,
      'Open Canal': 73,
      'Pasong Camachile I': 74,
      'Lancaster New City': 75,
      'Riverside': 76,
      'Malabon': 77,
      'Robinson Tejero': 78,
      'SM Epza': 79,
    };

    // Try both routes
    return route1Map[checkpointName] || route2Map[checkpointName] || null;
  }

  /**
   * Get available routes from database
   */
  private async getAvailableRoutes(): Promise<string[]> {
    try {
      const response = await fetch(`${this.baseUrl}/route/1`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });

      if (response.ok) {
        const data = await response.json();
        if (data.status === 'success' && data.checkpoints) {
          return data.checkpoints.map((cp: any) => cp.checkpoint_name);
        }
      }
    } catch (error) {
      console.error('‚ùå Error fetching routes:', error);
    }

    // Fallback to static routes
    return Object.keys(this.checkpointTranslations);
  }
}

export const biyaBotService = new BiyaBotService();
