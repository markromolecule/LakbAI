<?php
/**
 * Admin QR Code Management Routes
 * 
 * This file contains the API routes for managing location-based QR codes
 * that drivers can scan to update their location and notify passengers.
 * 
 * These QR codes are generated by administrators and placed at designated
 * jeepney stops, terminals, and checkpoints throughout the city.
 */

require_once '../config/db.php';
require_once '../controllers/AdminQRController.php';

header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, PUT, PATCH, DELETE, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization');

// Handle preflight requests
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

$adminQRController = new AdminQRController();
$method = $_SERVER['REQUEST_METHOD'];
$path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
$pathParts = explode('/', trim($path, '/'));

try {
    switch ($method) {
        case 'GET':
            if (isset($pathParts[3]) && $pathParts[3] === 'locations') {
                // GET /api/admin/qr/locations - Get all QR code locations
                if (isset($_GET['active_only'])) {
                    echo $adminQRController->getActiveLocations();
                } else {
                    echo $adminQRController->getAllLocations();
                }
            } elseif (isset($pathParts[4])) {
                // GET /api/admin/qr/locations/{locationId} - Get specific location
                echo $adminQRController->getLocationById($pathParts[4]);
            } elseif (isset($pathParts[3]) && $pathParts[3] === 'generate') {
                // GET /api/admin/qr/generate/{locationId} - Generate QR for location
                if (isset($pathParts[4])) {
                    echo $adminQRController->generateLocationQR($pathParts[4]);
                } else {
                    http_response_code(400);
                    echo json_encode(['error' => 'Location ID required']);
                }
            } elseif (isset($pathParts[3]) && $pathParts[3] === 'batch') {
                // GET /api/admin/qr/batch - Generate QR codes for all locations
                echo $adminQRController->generateBatchQRs();
            } else {
                http_response_code(404);
                echo json_encode(['error' => 'Endpoint not found']);
            }
            break;

        case 'POST':
            $input = json_decode(file_get_contents('php://input'), true);
            
            if (isset($pathParts[3]) && $pathParts[3] === 'locations') {
                // POST /api/admin/qr/locations - Create new location
                echo $adminQRController->createLocation($input);
            } elseif (isset($pathParts[3]) && $pathParts[3] === 'validate') {
                // POST /api/admin/qr/validate - Validate QR code data
                echo $adminQRController->validateQRCode($input);
            } elseif (isset($pathParts[3]) && $pathParts[3] === 'scan-log') {
                // POST /api/admin/qr/scan-log - Log driver scan event
                echo $adminQRController->logDriverScan($input);
            } else {
                http_response_code(404);
                echo json_encode(['error' => 'Endpoint not found']);
            }
            break;

        case 'PUT':
            $input = json_decode(file_get_contents('php://input'), true);
            
            if (isset($pathParts[4])) {
                // PUT /api/admin/qr/locations/{locationId} - Update location
                echo $adminQRController->updateLocation($pathParts[4], $input);
            } else {
                http_response_code(400);
                echo json_encode(['error' => 'Location ID required']);
            }
            break;

        case 'DELETE':
            if (isset($pathParts[4])) {
                // DELETE /api/admin/qr/locations/{locationId} - Delete location
                echo $adminQRController->deleteLocation($pathParts[4]);
            } else {
                http_response_code(400);
                echo json_encode(['error' => 'Location ID required']);
            }
            break;

        default:
            http_response_code(405);
            echo json_encode(['error' => 'Method not allowed']);
            break;
    }
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode([
        'error' => 'Internal server error',
        'message' => $e->getMessage()
    ]);
}

/**
 * Example API Usage:
 * 
 * 1. Get all locations:
 *    GET /api/admin/qr/locations
 * 
 * 2. Create a new location:
 *    POST /api/admin/qr/locations
 *    {
 *        "locationName": "New Terminal",
 *        "coordinates": {"latitude": 10.3157, "longitude": 123.9054},
 *        "category": "terminal",
 *        "metadata": {"expectedPassengerVolume": "high"}
 *    }
 * 
 * 3. Generate QR code for a location:
 *    GET /api/admin/qr/generate/terminal_robinson_galleria
 * 
 * 4. Generate QR codes for all locations:
 *    GET /api/admin/qr/batch
 * 
 * 5. Log a driver scan:
 *    POST /api/admin/qr/scan-log
 *    {
 *        "driverId": "driver_001",
 *        "locationId": "terminal_robinson_galleria",
 *        "timestamp": "2024-01-20T10:30:00.000Z",
 *        "jeepneyNumber": "LKB-001"
 *    }
 * 
 * 6. Validate QR code:
 *    POST /api/admin/qr/validate
 *    {
 *        "qrData": "{\"type\":\"admin_location\",\"locationId\":\"terminal_robinson_galleria\",...}"
 *    }
 */
?>
